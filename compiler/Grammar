LBRACE ::= {
RBRACE ::= }

LBRKT ::= (
RBRKT ::= )

DBL_QUOTE ::= "

EQUAL ::=   =
SEMI_COLON ::=  ;

FOR ::= for

IF ::= if
ELSE ::= else
THEN ::= then

ACCESS_MODIFIER ::= public | private
STATIC_MODIFIER ::= static

TYPENAME ::= [A-Z][0-9A-Za-z_]*

IDENTIFIER ::= [a-z_][A-Za-z_0-9]*

CLASS ::= ACCESS_MODIFIER class LBRACE CLASS_BODY RBRACE

CLASS_BODY ::=  (DEFN)*

DEFN ::= CLASS_FIELD_DEFN | CLASS_METHOD_DEFN

CLASS_FIELD_DEFN ::= TYPENAME IDENTIFIER (EQUAL EXPRESSION)? SEMI_COLON

CLASS_METHOD_DEFN ::= ACCESS_MODIFIER (STATIC_MODIFIER)? TYPENAME IDENTIFIER PARAM_LIST SCOPED_BODY

PARAM_LIST ::= LBRKT METHOD_PARAMS RBRKT
METHOD_PARAMS ::= EMPTY | (PARAM_DECL COMMA)* PARAM_DECL
PARAM_DECL ::= TYPENAME IDENTIFIER

SCOPED_BODY ::= LBRACE BODY RBRACE

BODY ::= (STATEMENT SEMI_COLON)*

STATEMENT ::= ASSIGNMENT | EXPRESSION | BRANCH_STMT | LOOP_STMT

ASSIGNMENT ::= TYPENAME IDENTIFIER EQUAL EXPRESSION

LOOP_STMT ::= FOR LBRKT STATEMENT SEMI_COLON EXPRESSION SEMI_COLON STATEMENT FOR_BODY

FOR_BODY ::= SCOPED_BODY | SEMI_COLON

BRANCH_STMT ::= IF LBRKT EXPRESSION RBRKT SCOPED_BODY (ELSE SCOPED_BODY)?
 
EXPRESSION ::= LITERAL | IDENTIFIER | FIELD_REF | LBRKT EXPRESSION RBRKT | EXPRESSION BINARY_OP EXPRESSION

FIELD_REF ::= DATA_FIELD_REF | METHOD_CALL

DATA_FIELD_REF ::= [a-z_][A-Za-z_0-9]*\.[a-z_][A-Za-z_0-9]*
METHOD_CALL ::= DATA_FIELD_REF LBRKT ARG_LIST RBRKT
ARG_LIST ::= EMPTY | ARG (COMMA ARG)*
ARG ::= EXPRESSION

LITERAL ::= NUMBER | STRING_LITERAL
STRING_LITERAL ::= DBL_QUOTE .* DBL_QUOTE
DIGIT_STR ::= [0-9]+
INTEGER ::= [+-]?[0-9]+
NUMBER ::= [+-]?([0-9]*\.[0-9]*(E[+-]?[0-9]+)?)

BINARY_OP ::= ARITH_OP | BOOLEAN_OP | BITWISE_OP

ARITH_OP ::= + | - | * | ^ | %

BOOLEAN_OP ::= && | \|\|

BITWISE_OP ::= \| | & | ^
